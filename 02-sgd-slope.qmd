# Stochastic Gradient Descent for slope


## Generate data distributed normally relative to the slope

```{r}
#| warning: false
#| message: false
library(tidyverse)

set.seed(128230565)
x_range <- c(-15, 15)
slope <- 3
slope_df <- 
  tibble(x = x_range[1]:x_range[2]) %>%
  mutate(y = rnorm(n(), mean = x * slope, sd = 10))
```

Here is the dependence visualized with the blue line representing a true slope and the red line --- the sample slope.
```{r}
#| echo: false
sample_slope <- coef(lm(y ~ x - 1, slope_df))[1]

ggplot(slope_df, aes(x = x, y = y)) +
  geom_point() +
  geom_abline(slope = slope, color = "blue", intercept = 0) +
  geom_abline(slope = sample_slope, color = "red", intercept = 0)
```

## Direction of adjusment based on difference and input

```{r}
condition <- c("Slope too high, positive input", "Slope too low, positive input",
               "Slope too high, negative input", "Slope too low, negative input")

example_slope <- tibble(Slope = sample_slope + 10 * c(1, -1, 1, -1),
                        Condition = condition) 
example_slope_lines <-
  example_slope %>%
  group_by(Condition) %>%
  summarise(x = x_range,
            y = Slope[1] * x,
            .groups = "drop")

example_point <-
  tibble(Condition = condition,
         Curvature = 0.5 * c(-1, 1, -1, -1),
         x = slope_df[['x']][c(25, 25, 5, 5)],
         y = slope_df[['x']][c(25, 25, 5, 5)]) %>%
  mutate(ypred = x * example_slope[['Slope']])



ggplot(data = example_slope_lines, aes(x = x, y = y)) +
  geom_line(color = "orange") +
  geom_point(data = slope_df, aes(x = x, y = y)) +
  geom_point(data = example_point, color = "red") +
  geom_curve(data = example_point, aes(x = x, y = ypred, xend = x, yend = y),  curvature = -0.5, arrow = arrow(length = unit(0.03, "npc"))) +
  facet_wrap(.~Condition, ncol = 2)
```


## SDG step by step

First, we make a random guess about the slope.
```{r}
# generate a random initial guess about the mean
set.seed(87391724)
current_guess_at_slope <- rnorm(1, sd = 10)
```

```{r}
#| echo: false

ggplot(slope_df, aes(x = x, y = y)) +
  geom_point() +
  geom_abline(slope = sample_slope, color = "black", intercept = 0) +
  geom_abline(slope = current_guess_at_slope, color = "orange", intercept = 0)
```
